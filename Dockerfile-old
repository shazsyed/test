# Install dependencies only when needed
FROM node:18-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

# Build the app with code and dependencies
FROM node:18-alpine AS builder
ENV NODE_ENV=production
ENV NEXT_PUBLIC_SOCKET_URL=http://ec2-18-141-212-130.ap-southeast-1.compute.amazonaws.com:4001
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npx prisma generate
RUN npm run build

# Production image, copy only necessary files
FROM node:18-alpine AS runner
WORKDIR /app

# Set NODE_ENV to production
ENV NODE_ENV=production
ENV NEXT_PUBLIC_SOCKET_URL=http://ec2-18-141-212-130.ap-southeast-1.compute.amazonaws.com:4001

# Copy package.json and lock for npm ci --production
COPY package.json package-lock.json ./
RUN npm ci --omit=dev

# Copy built Next.js app and any needed files from builder
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# If you need Prisma client at runtime, copy it
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# If you need your schema or migrations at runtime, copy them too
COPY --from=builder /app/prisma ./prisma

COPY --from=builder /app/dist/socket-server.js ./socket-server.js

RUN npm install npm-run-all -g

# Expose ports
EXPOSE 3000
EXPOSE 4001

# COPY entrypoint.sh /usr/bin/
# RUN chmod +x /usr/bin/entrypoint.sh
# ENTRYPOINT ["entrypoint.sh"]

# Start the app
CMD ["npm", "run", "start:prod"]